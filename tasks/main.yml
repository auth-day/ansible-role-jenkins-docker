---
- name: install python-pip
  package: name=python-pip state=latest

- name: isntall docker-py
  pip: name=docker-py state=latest

- name: which user has 1000 UID
  shell: 'grep 1000 /etc/passwd | cut -d: -f1'
  register: user_name_1000

### if no user found - "" will be saved in var
### then jenkins user will be created
 
- name: create user jenkins if no 1000 UID user
  user: name=jenkins shell={{ shell }} state=present generate_ssh_key=yes uid=1000
  when: user_name_1000.stdout == ""

- name: create volume for sharing jenkins home dir 
  docker_volume: name={{ jenkins_home }}

- name: Pull {{ docker_image }}
  docker_image: name={{ docker_image }}

- name: copy systemd unit for jenkins-docker.service
  template: src=jenkins-docker.service.j2 dest=/etc/systemd/system/jenkins-docker.service
  notify: systemctl daemon-reload

- name: reload systemd
  shell: systemctl daemon-reload

- name: start and enable jenkins-docker.service
  service: name=jenkins-docker state=restarted enabled=yes

- name: save public key to variable for Jenkins user
  slurp: src=/home/jenkins/.ssh/id_rsa.pub
  register: key
  when: user_name_1000.stdout == ""

- name: check if file exists 
  stat: path=/home/{{ user_name_1000.stdout }}/.ssh/id_rsa.pub
  register: file

- name: save public key to var from {{ user_name_1000.stdout }} user 
  slurp: src=/home/{{ user_name_1000.stdout }}/.ssh/id_rsa.pub
  register: key
  when: file.stat.exists == True

- name: if user has no ssh key 
  debug: msg=" ************ you need to create ssh keys for {{ user_name_1000.stdout }} **************"
  when: file.stat.exists == False

- name: copy this key
  debug: msg="{{ key.content | b64decode }} , and distribute it on the nodes. Use this role for example https://github.com/diboanches/ansible-role-user-management"
  when: file.stat.exists == True

- name: sleep for 30 seconds for secret init
  shell: sleep 30

- name: going after initialPassword
  slurp: src={{ secret_place }} 
  register: initialPass

- name: and here is initialPassword
  debug: msg="{{ initialPass.content | b64decode }} , paste it to UI initial setup"

#- name: install workflow-agregator plugin
#  shell: java -jar /var/lib/docker/volumes/jenkins/_data/war/WEB-INF/jenkins-cli.jar -s http://localhost:8080 -auth admin:{{ initialPass.content | b64decode }}   install-plugin workflow-aggregator

